pyNFFT - Cython wrapper around the NFFT library
===============================================

"The NFFT is a C subroutine library for computing the nonequispaced discrete
Fourier transform (NDFT) in one or more dimensions, of arbitrary input size,
and of complex data."

The NFFT library is licensed under GPLv2 and available at:
http://www-user.tu-chemnitz.de/~potts/nfft/index.php

This wrapper provides a somewhat Pythonic access to some of the core NFFT 
library functionalities and is largely inspired from the pyFFTW project 
developped by Henry Gomersall (http://hgomersall.github.io/pyFFTW/).

This project is still work in progress and is still considered beta quality.
In particular, the API is not yet frozen and is likely to change as the 
development continues. Please consult the documentation and changelog for 
more information.

The documentation is hosted on 
`github pages <http://ghisvail.github.io/pyNFFT>`_, the source code is
available on `github <https://github.com/ghisvail/pyNFFT>`_ and the Python
package index page is `here <https://pypi.python.org/pypi/pyNFFT>`_.

Requirements
------------
- Python 2.7 or greater
- Numpy 1.6 or greater
- NFFT 3.2 or greater
- Cython 0.15 or greater (optional)

Installation
------------

Support for pip/easy_install has been added via the `Python Package Index
<http://pypi.python.org/pypi/>`_. The pyNFFT package can be installed via::
        
        pip install pynfft

or::

        easy_install pynfft

Installation will fail if the NFFT library is not installed in a system-aware
location. A workaround for this is to first call pip with::

        pip install --no-install pynfft

cd to where pip downloaded the package, then build with `setup.py`::

        python setup.py build_ext --library-dirs=<path_to_libnfft_dir>
        --include-dirs=<path_to_libnfft_include>

and do a final call to pip::

       pip install --no-download pynfft

Building
--------

The pyNFFT package can be built from the cloned git repository by calling::

        python setup.py build

and then installed with::

        python setup.py install

The build process will use the autogenerated c-files to generate the
extensions. If you want to hack the Cython sources and regenerate the c-files
and extension, use the `cython_setup.py` file with::

    $python cython_setup build_ext --inplace

Again, if you installed the NFFT library in a non system-aware location, you can 
specify the location of the library and include files with the `--library-dirs`
and `--include-dirs` flags. For instance::

    $python cython_setup build_ext --inplace --library-dirs=$HOME/local/lib
    --include-dirs=$HOME/local/include

Build info
----------

NFFT has to be compiled with the --enable-openmp flag to allow for the
generation of the threaded version of the library. Without it, any attempt to
building the project will fail.
